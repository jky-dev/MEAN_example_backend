{"version":3,"sources":["../src/server.js"],"names":["app","router","express","Router","use","bodyParser","json","port","process","env","PORT","mongoose","connect","connection","once","console","log","route","get","req","res","Issue","find","err","issues","findById","params","id","issue","post","body","save","then","status","send","next","Error","title","responsible","description","severity","findByIdAndRemove","_id","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;;AAEA,IAAMC,MAAM,GAAGC,oBAAQC,MAAR,EAAf;;AAEAH,GAAG,CAACI,GAAJ,CAAQ,uBAAR;AACAJ,GAAG,CAACI,GAAJ,CAAQC,uBAAWC,IAAX,EAAR;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B;;AAEAC,qBAASC,OAAT,CAAiB,kGAAjB;;AAEA,IAAMC,UAAU,GAAGF,qBAASE,UAA5B;AAEAA,UAAU,CAACC,IAAX,CAAgB,MAAhB,EAAwB,YAAM;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACH,CAFD,E,CAIA;;AACAf,MAAM,CAACgB,KAAP,CAAa,SAAb,EAAwBC,GAAxB,CAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACtCC,oBAAMC,IAAN,CAAW,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACxB,QAAID,GAAJ,EAAS;AACLR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACH,KAFD,MAEO;AACH;AACAH,MAAAA,GAAG,CAACd,IAAJ,CAASkB,MAAT;AACH;AACJ,GAPD;AAQH,CATD,E,CAWA;;AACAvB,MAAM,CAACgB,KAAP,CAAa,aAAb,EAA4BC,GAA5B,CAAgC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1CC,oBAAMI,QAAN,CAAeN,GAAG,CAACO,MAAJ,CAAWC,EAA1B,EAA8B,UAACJ,GAAD,EAAMK,KAAN,EAAgB;AAC1C,QAAIL,GAAJ,EAAS;AACLR,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACH,KAFD,MAEO;AACHH,MAAAA,GAAG,CAACd,IAAJ,CAASsB,KAAT;AACH;AACJ,GAND;AAOH,CARD,E,CAUA;;AACA3B,MAAM,CAACgB,KAAP,CAAa,aAAb,EAA4BY,IAA5B,CAAiC,UAACV,GAAD,EAAMC,GAAN,EAAc;AAC3C,MAAIQ,KAAK,GAAG,IAAIP,iBAAJ,CAAUF,GAAG,CAACW,IAAd,CAAZ;AACAF,EAAAA,KAAK,CAACG,IAAN,GAAa;AAAb,GACKC,IADL,CACU,UAAAJ,KAAK,EAAI;AACXR,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgB3B,IAAhB,CAAqB;AAAC,eAAS;AAAV,KAArB;AACH,GAHL,WAIW,UAAAiB,GAAG,EAAI;AACVH,IAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+BAArB;AACH,GANL;AAOH,CATD,E,CAWA;;AACAjC,MAAM,CAACgB,KAAP,CAAa,oBAAb,EAAmCY,IAAnC,CAAwC,UAACV,GAAD,EAAMC,GAAN,EAAc;AAClDC,oBAAMI,QAAN,CAAeN,GAAG,CAACO,MAAJ,CAAWC,EAA1B,EAA8B,UAACJ,GAAD,EAAMK,KAAN,EAAgB;AAC1C,QAAI,CAACA,KAAL,EAAY;AACR,aAAOO,IAAI,CAAC,IAAIC,KAAJ,CAAU,yBAAV,CAAD,CAAX;AACH,KAFD,MAEO;AACHR,MAAAA,KAAK,CAACS,KAAN,GAAclB,GAAG,CAACW,IAAJ,CAASO,KAAvB;AACAT,MAAAA,KAAK,CAACU,WAAN,GAAoBnB,GAAG,CAACW,IAAJ,CAASQ,WAA7B;AACAV,MAAAA,KAAK,CAACW,WAAN,GAAoBpB,GAAG,CAACW,IAAJ,CAASS,WAA7B;AACAX,MAAAA,KAAK,CAACY,QAAN,GAAiBrB,GAAG,CAACW,IAAJ,CAASU,QAA1B;AACAZ,MAAAA,KAAK,CAACK,MAAN,GAAed,GAAG,CAACW,IAAJ,CAASG,MAAxB;AAEAL,MAAAA,KAAK,CAACG,IAAN,GAAaC,IAAb,CAAkB,UAAAJ,KAAK,EAAI;AACvBR,QAAAA,GAAG,CAACd,IAAJ,CAAS,aAAT;AACH,OAFD,WAES,UAAAiB,GAAG,EAAI;AACZH,QAAAA,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,eAArB;AACH,OAJD;AAKH;AACJ,GAhBD;AAiBH,CAlBD,E,CAoBA;;AACAjC,MAAM,CAACgB,KAAP,CAAa,oBAAb,EAAmCC,GAAnC,CAAuC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjDC,oBAAMoB,iBAAN,CAAwB;AAACC,IAAAA,GAAG,EAAEvB,GAAG,CAACO,MAAJ,CAAWC;AAAjB,GAAxB,EAA8C,UAACJ,GAAD,EAAMK,KAAN,EAAgB;AAC1D,QAAIL,GAAJ,EAAS;AACLH,MAAAA,GAAG,CAACd,IAAJ,CAASiB,GAAT;AACH,KAFD,MAEO;AACHH,MAAAA,GAAG,CAACd,IAAJ,CAAS,qBAAT;AACH;AACJ,GAND;AAOH,CARD;AAUAN,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAaH,MAAb;AAEAD,GAAG,CAAC2C,MAAJ,CAAWpC,IAAX,EAAiB;AAAA,SAAMQ,OAAO,CAACC,GAAR,CAAY,6BAA6BT,IAAzC,CAAN;AAAA,CAAjB","sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport bodyParser from 'body-parser';\r\nimport mongoose from 'mongoose';\r\n\r\nimport Issue from './models/issue';\r\n\r\nconst app = express();\r\n\r\nconst router = express.Router();\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\nvar port = process.env.PORT || 8080;\r\n\r\nmongoose.connect('mongodb+srv://meantute:meantute@hardstyledb-oyyj0.mongodb.net/issues?retryWrites=true&w=majority');\r\n\r\nconst connection = mongoose.connection;\r\n\r\nconnection.once('open', () => {\r\n    console.log('MongoDB DB connection successfully established');\r\n})\r\n\r\n// get all issues from db\r\nrouter.route('/issues').get((req, res) => {\r\n    Issue.find((err, issues) => {\r\n        if (err) {\r\n            console.log(err);\r\n        } else {\r\n            // send back issues in json format\r\n            res.json(issues);\r\n        }\r\n    });\r\n});\r\n\r\n// retrieve specific issue from database\r\nrouter.route('/issues/:id').get((req, res) => {\r\n    Issue.findById(req.params.id, (err, issue) => {\r\n        if (err) {\r\n            console.log(err);\r\n        } else {\r\n            res.json(issue);\r\n        }\r\n    });\r\n});\r\n\r\n// Add new post\r\nrouter.route('/issues/add').post((req, res) => {\r\n    let issue = new Issue(req.body);\r\n    issue.save() // save to DB\r\n        .then(issue => {\r\n            res.status(200).json({'issue': 'Added successfully'})\r\n        })\r\n        .catch(err => {\r\n            res.status(400).send('Failed to create a new record');\r\n        });\r\n});\r\n\r\n// Update post by id\r\nrouter.route('/issues/update/:id').post((req, res) => {\r\n    Issue.findById(req.params.id, (err, issue) => {\r\n        if (!issue) {\r\n            return next(new Error('Could not load document'));\r\n        } else {\r\n            issue.title = req.body.title;\r\n            issue.responsible = req.body.responsible;\r\n            issue.description = req.body.description;\r\n            issue.severity = req.body.severity;\r\n            issue.status = req.body.status;\r\n\r\n            issue.save().then(issue => {\r\n                res.json('Update done');\r\n            }).catch(err => {\r\n                res.status(400).send('Update failed');\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// delete issue based on id\r\nrouter.route('/issues/delete/:id').get((req, res) => {\r\n    Issue.findByIdAndRemove({_id: req.params.id}, (err, issue) => {\r\n        if (err) {\r\n            res.json(err);\r\n        } else {\r\n            res.json('Remove successfully');\r\n        }\r\n    });\r\n});\r\n\r\napp.use('/', router);\r\n\r\napp.listen(port, () => console.log('Express running on port ' + port));"],"file":"server.js"}